name: üîê Secret Security Scan

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM

env:
  PROJECT_ID: api-for-warp-drive

jobs:
  secret-scan:
    name: üîç Scan for Hardcoded Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Secret Scanning Tools
        run: |
          # Install TruffleHog for comprehensive secret detection
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Run TruffleHog Secret Scan
        run: |
          echo "üîç Scanning for hardcoded secrets..."
          trufflehog filesystem . \
            --exclude-paths .github/workflows/secret-scan.yml \
            --exclude-paths node_modules/ \
            --exclude-paths dist/ \
            --exclude-paths .git/ \
            --exclude-paths reports/gcp-secrets.json \
            --json > secret-scan-results.json || true
            
      - name: Check Scan Results
        run: |
          if [ -s secret-scan-results.json ] && [ "$(jq length secret-scan-results.json)" -gt 0 ]; then
            echo "‚ùå SECURITY ALERT: Hardcoded secrets detected!"
            echo "üìã Found secrets:"
            cat secret-scan-results.json | jq -r '.[] | "\(.DetectorType): \(.Raw[:50])..."'
            
            echo "üö® Please move all secrets to Google Cloud Secret Manager:"
            echo "   1. Add secret to GCP: gcloud secrets create SECRET_NAME --data-file=-"
            echo "   2. Update code to use: process.env.SECRET_NAME (loaded via secure-env-loader.js)"
            echo "   3. Update deployment scripts to use: --set-secrets=\"SECRET_NAME=SECRET_NAME:latest\""
            
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected - scan passed!"
          fi
          
      - name: Verify GCP Secret Manager Integration
        run: |
          echo "üîç Verifying Secret Manager integration..."
          
          # Check if secure-env-loader is being used
          if grep -r "require.*secure-env-loader" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚úÖ secure-env-loader.js integration found"
          else
            echo "‚ö†Ô∏è  secure-env-loader.js not found in imports"
          fi
          
          # Check if universal-ai-key-manager is being used
          if grep -r "universal-ai-key-manager" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚úÖ universal-ai-key-manager-v2.ts integration found"
          else
            echo "‚ö†Ô∏è  universal-ai-key-manager-v2.ts not found in imports"
          fi
          
      - name: OAuth2 Configuration Check
        run: |
          echo "üîç Checking OAuth2 configuration security..."
          
          # Look for any hardcoded client_secret values
          if grep -r "client_secret.*:" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=tests | grep -v "test_secret"; then
            echo "‚ö†Ô∏è  Please verify all client_secret values use Secret Manager"
          else
            echo "‚úÖ OAuth2 configuration appears secure"
          fi
          
      - name: Generate Security Summary
        run: |
          echo "üìä Security Scan Summary" > security-summary.md
          echo "========================" >> security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Project:** api-for-warp-drive" >> security-summary.md
          echo "**Status:** $([ -s secret-scan-results.json ] && echo "‚ùå FAILED" || echo "‚úÖ PASSED")" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ -s secret-scan-results.json ] && [ "$(jq length secret-scan-results.json)" -gt 0 ]; then
            echo "**Issues Found:** $(jq length secret-scan-results.json)" >> security-summary.md
            echo "" >> security-summary.md
            echo "### Action Required:" >> security-summary.md
            echo "1. Move secrets to GCP Secret Manager" >> security-summary.md
            echo "2. Update code to use secure-env-loader.js" >> security-summary.md
            echo "3. Update deployment scripts with --set-secrets" >> security-summary.md
          else
            echo "**Issues Found:** 0" >> security-summary.md
            echo "" >> security-summary.md
            echo "‚úÖ All secrets properly managed via GCP Secret Manager" >> security-summary.md
          fi
          
      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            secret-scan-results.json
            security-summary.md
            
      - name: Comment PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let summary = 'üìä **Secret Security Scan**\n\n';
            
            try {
              const scanResults = fs.readFileSync('secret-scan-results.json', 'utf8');
              const results = JSON.parse(scanResults);
              
              if (results.length > 0) {
                summary += '‚ùå **SECURITY ALERT**: Hardcoded secrets detected!\n\n';
                summary += `Found ${results.length} potential secret(s). Please move all secrets to Google Cloud Secret Manager.\n\n`;
                summary += '**Required Actions:**\n';
                summary += '1. Add secrets to GCP: `gcloud secrets create SECRET_NAME --data-file=-`\n';
                summary += '2. Update code to use: `process.env.SECRET_NAME` (via secure-env-loader.js)\n';
                summary += '3. Update deployments: `--set-secrets="SECRET_NAME=SECRET_NAME:latest"`\n';
              } else {
                summary += '‚úÖ **PASSED**: No hardcoded secrets detected!\n\n';
                summary += 'All secrets properly managed via GCP Secret Manager with OAuth2 authentication.';
              }
            } catch (error) {
              summary += '‚úÖ **PASSED**: No hardcoded secrets detected!\n\n';
              summary += 'All secrets properly managed via GCP Secret Manager with OAuth2 authentication.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });