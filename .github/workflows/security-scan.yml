name: Security Scanning and Version Management

on:
  schedule:
    - cron: '0 */4 * * *'  # Run every 4 hours
  workflow_dispatch:  # Allow manual triggers

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up security tools
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.18.3
          sudo apt-get install -y sshpass

      - name: Run Trivy vulnerability scanner
        run: |
          trivy fs --security-checks vuln,config,secret .
          trivy repo --security-checks vuln,config,secret .

      - name: Check version scaling
        run: |
          max_versions=$(yq e '.scaling.max_versions' config/scaling.yaml)
          if [ "$max_versions" -lt 9000 ]; then
            echo "Error: Maximum versions must be at least 9000"
            exit 1
          fi

      - name: Verify horizontal scaling configuration
        run: |
          yq e '.agents.horizontal_scaling.max_agents' config/scaling.yaml
          yq e '.agents.horizontal_scaling.enabled' config/scaling.yaml

      - name: Cleanup old issues
        uses: actions/github-script@v6
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc'
            });

            for (const issue of issues.data) {
              // Keep important issues
              if (issue.labels.some(label => 
                ['security', 'high-priority', 'scaling'].includes(label.name)
              )) {
                continue;
              }

              // Close old, non-critical issues
              const ageInDays = (new Date() - new Date(issue.created_at)) / (1000 * 60 * 60 * 24);
              if (ageInDays > 30) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'not_planned'
                });
              }
            }

      - name: Create security report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = `Security Scan Complete
            - Horizontal scaling: Up to 9000 versions
            - Version management: Configured
            - Security checks: Completed
            - Issue cleanup: Processed`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”’ Security Scan Report',
              body: report,
              labels: ['security', 'high-priority']
            });

