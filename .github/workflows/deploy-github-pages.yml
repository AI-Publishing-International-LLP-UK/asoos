name: üìÑ Deploy ASOOS 2100.Cool to GitHub Pages

on:
  push:
    branches: [ production ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    name: üèóÔ∏è Build GitHub Pages Site
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Validate HTML Structure
        run: |
          echo "üîç Validating HTML structure..."
          # Check for required meta tags
          grep -q 'charset="UTF-8"' index.html || (echo "‚ùå Missing charset meta tag" && exit 1)
          grep -q 'viewport' index.html || (echo "‚ùå Missing viewport meta tag" && exit 1)
          
          # Check for authentication functions
          grep -q 'initiateAuthentication' index.html || (echo "‚ùå Authentication function missing" && exit 1)
          
          # Verify authentication redirects to /auth
          if grep -q "window.location.href = '/auth'" index.html; then
            echo "‚úÖ Authentication redirects properly configured"
          else
            echo "‚ùå Authentication should redirect to /auth" && exit 1
          fi
          
          echo "‚úÖ HTML validation passed"

      - name: Build Site Package
        run: |
          echo "üì¶ Building site package for GitHub Pages..."
          
          # Create deployment directory
          mkdir -p ./dist
          
          # Copy main files
          cp index.html ./dist/
          cp *.html ./dist/ 2>/dev/null || echo "No additional HTML files found"
          cp README.md ./dist/ || echo "README.md not found, skipping"
          
          # Create CNAME file for custom domain
          echo "2100.cool" > ./dist/CNAME
          
          # Create robots.txt
          cat > ./dist/robots.txt << EOF
          User-agent: *
          Allow: /
          
          Sitemap: https://2100.cool/sitemap.xml
          EOF
          
          # Create sitemap.xml
          cat > ./dist/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://2100.cool/</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>https://2100.cool/auth</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.8</priority>
            </url>
          </urlset>
          EOF
          
          # Create security.txt for responsible disclosure
          mkdir -p ./dist/.well-known
          cat > ./dist/.well-known/security.txt << EOF
          Contact: mailto:security@2100.cool
          Expires: $(date -d '+1 year' -u +%Y-%m-%dT%H:%M:%S.000Z)
          Preferred-Languages: en
          Canonical: https://2100.cool/.well-known/security.txt
          Policy: https://2100.cool/security-policy
          EOF
          
          # Create a simple 404 page
          cat > ./dist/404.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>404 - Page Not Found | ASOOS.2100.Cool</title>
            <style>
              body { 
                font-family: 'Montserrat', sans-serif; 
                background: #0a0a0a; 
                color: #fff; 
                text-align: center; 
                padding: 50px; 
              }
              .container { max-width: 600px; margin: 0 auto; }
              h1 { color: #0bb1bb; font-size: 3em; margin-bottom: 20px; }
              p { font-size: 1.2em; margin-bottom: 30px; }
              a { 
                color: #0bb1bb; 
                text-decoration: none; 
                border: 2px solid #0bb1bb; 
                padding: 10px 20px; 
                border-radius: 5px; 
                display: inline-block;
                transition: all 0.3s;
              }
              a:hover { background: #0bb1bb; color: #000; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>404</h1>
              <p>The page you're looking for doesn't exist in the ASOOS universe.</p>
              <a href="/">Return to ASOOS.2100.Cool</a>
            </div>
          </body>
          </html>
          EOF
          
          # Create manifest.json for PWA support
          cat > ./dist/manifest.json << EOF
          {
            "name": "ASOOS.2100.Cool - Aixtiv Symphony Orchestrating Operating System",
            "short_name": "ASOOS.2100.Cool",
            "description": "Aixtiv Symphony Orchestrating Operating System - Where Intelligence Meets Love",
            "start_url": "/",
            "display": "standalone",
            "background_color": "#0a0a0a",
            "theme_color": "#0bb1bb",
            "icons": [
              {
                "src": "/favicon.ico",
                "sizes": "32x32",
                "type": "image/x-icon"
              }
            ]
          }
          EOF
          
          # Create .nojekyll to prevent GitHub Pages Jekyll processing
          touch ./dist/.nojekyll
          
          echo "‚úÖ Site package built successfully"
          
          # List contents for verification
          echo "üìÅ Site contents:"
          ls -la ./dist/
          
          # Check total size
          TOTAL_SIZE=$(du -sh ./dist | cut -f1)
          echo "üìä Total site size: $TOTAL_SIZE"

      - name: Upload GitHub Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    name: üöÄ Deploy to GitHub Pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  verify:
    runs-on: ubuntu-latest
    needs: deploy
    name: üîç Verify GitHub Pages Deployment
    if: always()
    steps:
      - name: Wait for deployment propagation
        run: |
          echo "‚è≥ Waiting for GitHub Pages deployment to propagate..."
          sleep 120
          
      - name: Verify GitHub Pages URL
        run: |
          echo "üîç Testing GitHub Pages deployment..."
          
          # Get repository info
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          GH_PAGES_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}"
          
          echo "üåê Testing GitHub Pages URL: $GH_PAGES_URL"
          
          # Test GitHub Pages URL
          if curl -f -s -L "$GH_PAGES_URL" > /dev/null; then
            echo "‚úÖ GitHub Pages URL accessible"
          else
            echo "‚ö†Ô∏è GitHub Pages URL not accessible yet (may take a few minutes)"
          fi
          
      - name: Verify Custom Domain  
        run: |
          echo "üîç Testing custom domain..."
          
          CUSTOM_DOMAIN="https://2100.cool"
          
          echo "üåê Testing Custom Domain: $CUSTOM_DOMAIN"
          
          # Test custom domain
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L "$CUSTOM_DOMAIN" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Custom domain accessible and working"
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "‚ö†Ô∏è Custom domain configured but returning 404 (DNS may be propagating)"
          else
            echo "‚ö†Ô∏è Custom domain not accessible yet (HTTP $HTTP_CODE). DNS may need configuration."
            echo "üìã To configure DNS:"
            echo "   - Add CNAME record: 2100.cool ‚Üí ${REPO_OWNER}.github.io"
            echo "   - Or add A records pointing to GitHub Pages IPs"
          fi
          
      - name: Test Authentication Flow
        run: |
          echo "üîê Testing authentication functionality..."
          
          # Download the page and check for authentication function
          TEMP_FILE=$(mktemp)
          
          if curl -s -L "https://2100.cool" > "$TEMP_FILE" 2>/dev/null || curl -s -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" > "$TEMP_FILE" 2>/dev/null; then
            if grep -q "window.location.href = '/auth'" "$TEMP_FILE"; then
              echo "‚úÖ Authentication buttons configured correctly"
            else
              echo "‚ùå Authentication buttons not found or incorrectly configured"
            fi
            
            if grep -q "initiateAuthentication" "$TEMP_FILE"; then
              echo "‚úÖ Authentication function present"
            else
              echo "‚ùå Authentication function missing"
            fi
          else
            echo "‚ö†Ô∏è Unable to download page for authentication testing"
          fi
          
          rm -f "$TEMP_FILE"

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy, verify]
    name: üì¢ Deployment Notification
    if: always()
    steps:
      - name: Success Notification
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "üéâ ASOOS 2100.Cool successfully deployed to GitHub Pages!"
          echo "üåê GitHub Pages URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "üåê Custom Domain: https://2100.cool"
          echo "üîê Authentication: Sally Port Integration Active"
          echo "üé≠ Sacred Mission: Operational on GitHub Pages"
          echo "üìÑ Static Hosting: Optimized and Secure"
          echo ""
          echo "üìã DNS Configuration Required:"
          echo "   - Add CNAME: 2100.cool ‚Üí ${{ github.repository_owner }}.github.io"
          echo "   - Enable HTTPS in repository Settings ‚Üí Pages"
          
      - name: Failure Notification
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          echo "‚ùå GitHub Pages deployment failed. Please check the logs."
          echo "üîç Common issues:"
          echo "   - Pages not enabled in repository settings"
          echo "   - Incorrect permissions on workflow"
          echo "   - Build artifacts not properly uploaded"
          echo ""
          echo "üìã Required steps:"
          echo "   1. Go to repository Settings ‚Üí Pages"
          echo "   2. Set Source to 'GitHub Actions'"
          echo "   3. Ensure workflow has pages: write permission"

# Required Repository Settings:
# 1. Go to Settings ‚Üí Pages
# 2. Set Source to "GitHub Actions"
# 3. Add custom domain: 2100.cool
# 4. Enable "Enforce HTTPS"
#
# Required DNS Configuration:
# - Add CNAME record: 2100.cool ‚Üí ai-publishing-international-llp-uk.github.io
# - Or add A records pointing to GitHub Pages IP addresses
#
# This workflow creates a complete GitHub Pages deployment with:
# - Security headers via meta tags (since _headers isn't supported)
# - SEO optimization (sitemap, robots.txt)
# - PWA support (manifest.json)
# - Custom 404 page
# - Authentication flow preserved
