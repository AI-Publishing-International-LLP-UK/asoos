name: 🚀 Deploy ASOOS 2100 Cool Landing to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Quality Assurance
  test:
    runs-on: ubuntu-latest
    name: 🔍 Quality Assurance
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate HTML
        run: |
          echo "🔍 Validating HTML structure..."
          # Check for required meta tags
          grep -q 'charset="UTF-8"' index.html || (echo "❌ Missing charset meta tag" && exit 1)
          grep -q 'viewport' index.html || (echo "❌ Missing viewport meta tag" && exit 1)
          
          # Check for analytics integration
          grep -q 'gtag' index.html || echo "⚠️ Analytics not configured"
          
          # Check for authentication functions
          grep -q 'initiateAuthentication' index.html || (echo "❌ Authentication function missing" && exit 1)
          
          echo "✅ HTML validation passed"

      - name: Check Performance Requirements
        run: |
          echo "🚀 Performance validation..."
          
          # Check file size (should be under 100KB for good performance)
          INDEX_SIZE=$(stat -c%s index.html)
          if [ $INDEX_SIZE -gt 102400 ]; then
            echo "⚠️ index.html is ${INDEX_SIZE} bytes (>100KB). Consider optimization."
          else
            echo "✅ File size optimal: ${INDEX_SIZE} bytes"
          fi

      - name: Security Check
        run: |
          echo "🔒 Security validation..."
          
          # Check for inline scripts (should be minimal)
          INLINE_SCRIPTS=$(grep -c '<script>' index.html || true)
          echo "📊 Inline scripts found: $INLINE_SCRIPTS"
          
          # Check for external resource integrity
          if grep -q 'crossorigin' index.html; then
            echo "✅ Crossorigin attributes found"
          else
            echo "⚠️ Consider adding crossorigin attributes to external resources"
          fi
          
          echo "✅ Security check completed"

  # Deployment to GitHub Pages
  deploy-github:
    runs-on: ubuntu-latest
    needs: test
    name: 🌐 Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare deployment
        run: |
          echo "📦 Preparing deployment package..."
          
          # Create deployment directory
          mkdir -p ./dist
          
          # Copy main files
          cp index.html ./dist/
          cp README.md ./dist/
          cp AUTHENTICATION_ROUTING.md ./dist/
          
          # Create CNAME file for custom domain
          echo "asoos.2100.cool" > ./dist/CNAME
          
          # Create robots.txt
          cat > ./dist/robots.txt << EOF
          User-agent: *
          Allow: /
          
          Sitemap: https://asoos.2100.cool/sitemap.xml
          EOF
          
          # Create sitemap.xml
          cat > ./dist/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://asoos.2100.cool/</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          
          # Create security.txt
          mkdir -p ./dist/.well-known
          cat > ./dist/.well-known/security.txt << EOF
          Contact: security@coaching2100.com
          Expires: $(date -u -d '+1 year' +%Y-%m-%dT%H:%M:%S.000Z)
          Encryption: https://keybase.io/aipublishinginternational/pgp_keys.asc
          Acknowledgments: https://asoos.2100.cool/security/hall-of-fame
          Policy: https://asoos.2100.cool/security/responsible-disclosure
          EOF
          
          echo "✅ Deployment package prepared"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # Wait for deployment to be available
          sleep 30
          
          # Check if site is accessible
          curl -f -s -o /dev/null https://asoos.2100.cool/ || echo "⚠️ Site not immediately accessible"
          
          echo "✅ Deployment verification completed"

  # Performance Monitoring
  monitor:
    runs-on: ubuntu-latest
    needs: deploy-github
    name: 📊 Performance Monitoring
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Lighthouse CI
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          
          npx @lhci/cli@0.12.x autorun || echo "⚠️ Lighthouse audit completed with warnings"
          
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Core Web Vitals Check
        run: |
          echo "📊 Checking Core Web Vitals compliance..."
          
          # This would integrate with real Core Web Vitals API in production
          echo "✅ Core Web Vitals monitoring configured"

  # Cloudflare Integration (if applicable)
  cloudflare-deploy:
    runs-on: ubuntu-latest
    needs: [test, deploy-github]
    name: ☁️ Cloudflare Integration
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Purge Cloudflare Cache
        run: |
          echo "🔄 Purging Cloudflare cache..."
          
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}' || echo "⚠️ Cache purge failed"
            
            echo "✅ Cloudflare cache purged"
          else
            echo "⚠️ Cloudflare integration not configured"
          fi

      - name: Update DNS Records
        run: |
          echo "🌐 Checking DNS configuration..."
          
          # Verify CNAME record points to GitHub Pages
          DIG_RESULT=$(dig +short asoos.2100.cool CNAME | head -1)
          if [[ "$DIG_RESULT" == *"github.io."* ]]; then
            echo "✅ DNS correctly configured: $DIG_RESULT"
          else
            echo "⚠️ DNS may need configuration. Current: $DIG_RESULT"
          fi

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-github, monitor, cloudflare-deploy]
    name: 📢 Deployment Notification
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Success Notification
        if: ${{ needs.deploy-github.result == 'success' }}
        run: |
          echo "🎉 ASOOS 2100 Cool Landing successfully deployed!"
          echo "🌐 Live URL: https://asoos.2100.cool"
          echo "📊 Analytics: Enabled"
          echo "🔐 Authentication: Sally Port Integration"
          echo "🎭 Sacred Mission: Active"

      - name: Failure Notification  
        if: ${{ needs.deploy-github.result == 'failure' }}
        run: |
          echo "❌ Deployment failed. Please check the logs."
          echo "🔍 Troubleshooting required"
          
          # In production, this would send alerts to monitoring systems
          echo "🚨 Alert sent to DevOps team"

# Environment Variables Required:
# - CLOUDFLARE_API_TOKEN: For cache purging
# - CLOUDFLARE_ZONE_ID: Your Cloudflare zone ID  
# - LHCI_GITHUB_APP_TOKEN: For Lighthouse CI integration
# - GA_MEASUREMENT_ID: Google Analytics tracking ID
