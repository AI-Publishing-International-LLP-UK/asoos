# Secure TensorFlow Dockerfile - Replaces vulnerable tensorflow/tensorflow:*
# Uses Ubuntu 24.04 LTS (secure) instead of Ubuntu 22.04 (vulnerable)

FROM ubuntu:24.04

LABEL maintainer="api-for-warp-drive@coaching2100.com"
LABEL version="secure-2024"
LABEL security.scan="enabled"
LABEL description="Secure TensorFlow with Jupyter - Ubuntu 24.04 base"

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV PYTHONUNBUFFERED=1
ENV TF_CPP_MIN_LOG_LEVEL=1

# Create non-root user early for security
RUN groupadd -r tensorflow && useradd -r -g tensorflow tensorflow

# Install system dependencies with security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-pip \
        python3-dev \
        python3-venv \
        build-essential \
        curl \
        wget \
        git \
        ca-certificates \
        gnupg \
        lsb-release \
        pkg-config \
        libhdf5-dev \
        libssl-dev \
        libffi-dev \
        libjpeg-dev \
        libpng-dev \
        libfreetype6-dev \
        # nodejs and npm will be installed from NodeSource for newer version
        && \
    # Install Node.js 22 (required for JupyterLab)
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    # Verify Node.js version
    node --version && \
    npm --version && \
    # Clean up to reduce attack surface
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # Create Python virtual environment
    python3 -m venv /opt/tensorflow-env

# Activate virtual environment and install Python packages
ENV PATH="/opt/tensorflow-env/bin:$PATH"
RUN pip install --no-cache-dir --upgrade \
        pip \
        setuptools \
        wheel && \
    pip install --no-cache-dir \
        tensorflow==2.17.0 \
        jupyter \
        jupyterlab \
        notebook \
        numpy \
        pandas \
        matplotlib \
        seaborn \
        scikit-learn \
        plotly \
        ipywidgets \
        nbconvert

# Skip Jupyter lab build to avoid memory issues in Docker build
# JupyterLab will build extensions on first run if needed

# Create secure working directory
WORKDIR /tf
RUN mkdir -p /tf/notebooks /tf/data && \
    chown -R tensorflow:tensorflow /tf && \
    chown -R tensorflow:tensorflow /opt/tensorflow-env

# Copy any existing notebooks or data (if present)
# COPY --chown=tensorflow:tensorflow notebooks/ /tf/notebooks/
# COPY --chown=tensorflow:tensorflow data/ /tf/data/

# Switch to non-root user
USER tensorflow

# Configure Jupyter
RUN jupyter lab --generate-config && \
    echo "c.ServerApp.ip = '0.0.0.0'" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.port = 8888" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.open_browser = False" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.allow_root = False" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.token = ''" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.password = ''" >> ~/.jupyter/jupyter_lab_config.py

# Expose Jupyter port (non-privileged)
EXPOSE 8888

# Health check for monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8888/lab || exit 1

# Create README for the container
RUN echo "# Secure TensorFlow Container" > /tf/README.md && \
    echo "This container uses Ubuntu 24.04 LTS for enhanced security." >> /tf/README.md && \
    echo "TensorFlow version: 2.17.0" >> /tf/README.md && \
    echo "Jupyter Lab available at: http://localhost:8888" >> /tf/README.md && \
    echo "Working directory: /tf" >> /tf/README.md

# Start Jupyter Lab
CMD ["jupyter", "lab", "--notebook-dir=/tf", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root=false"]
