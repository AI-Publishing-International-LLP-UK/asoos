#!/usr/bin/env node

/**
 * MCP Quick Setup - "IF NO MCP HURRY MAKE ONE QUICK! :)"
 * 
 * Rapid company MCP deployment with first Sapphire SAO setup
 * Usage: mcp-quick-setup [company-name] [user-email]
 */

const MCPCompanyProvisioner = require('../automation/mcp-company-provisioner');
const readline = require('readline');

class MCPQuickSetup {
    constructor() {
        this.provisioner = new MCPCompanyProvisioner();
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    /**
     * Interactive setup flow
     */
    async interactiveSetup() {
        console.log('🚀 MCP Quick Setup - Get Your Company\'s AI Transformation Started!');
        console.log('📍 "IF NO MCP HURRY MAKE ONE QUICK! :)"\n');

        try {
            // Get company name
            const companyName = await this.askQuestion('Enter your company name: ');
            if (!companyName) {
                console.log('❌ Company name is required!');
                return;
            }

            // Check if MCP already exists
            console.log(`🔍 Checking if MCP already exists for ${companyName}...`);
            const exists = await this.provisioner.checkExistingMCP(companyName);
            
            if (exists) {
                console.log(`✅ Found existing MCP for ${companyName}!`);
                console.log(`🌐 Access: https://mcp.${companyName.toLowerCase().replace(/\s+/g, '')}.2100.cool`);
                
                const userEmail = await this.askQuestion('Enter your email to join as Sapphire SAO: ');
                await this.addSapphireToExistingMCP(companyName, userEmail);
                
            } else {
                console.log(`🆕 No MCP found for ${companyName} - let's create one!`);
                
                // Get user email
                const userEmail = await this.askQuestion('Enter your email (you\'ll be the first Sapphire SAO): ');
                if (!userEmail) {
                    console.log('❌ Email is required!');
                    return;
                }

                // Optional: Get additional info
                const department = await this.askQuestion('Your department (optional): ');
                const role = await this.askQuestion('Your role/title (optional): ');

                const userInfo = { department, role };

                // Confirm setup
                console.log('\n📋 Setup Summary:');
                console.log(`🏢 Company: ${companyName}`);
                console.log(`📧 First Sapphire SAO: ${userEmail}`);
                console.log(`🌐 MCP Domain: mcp.${companyName.toLowerCase().replace(/\s+/g, '')}.2100.cool`);
                console.log('👑 Status: First Pioneer - Full Sapphire SAO Access');
                console.log('📚 Educational Seedling: Will be activated');
                console.log('🎁 Incentive Program: Enabled for leadership referrals');

                const confirm = await this.askQuestion('\nProceed with rapid MCP deployment? (y/N): ');
                
                if (confirm.toLowerCase() === 'y' || confirm.toLowerCase() === 'yes') {
                    await this.deployNewMCP(companyName, userEmail, userInfo);
                } else {
                    console.log('⏸️ Setup cancelled by user');
                }
            }

        } catch (error) {
            console.error('💥 Setup failed:', error.message);
        } finally {
            this.rl.close();
        }
    }

    /**
     * Command line setup (non-interactive)
     */
    async commandLineSetup(companyName, userEmail) {
        console.log('🚀 MCP Quick Setup - Command Line Mode');
        console.log('📍 "IF NO MCP HURRY MAKE ONE QUICK! :)"\n');

        try {
            console.log(`🔍 Checking ${companyName}...`);
            const exists = await this.provisioner.checkExistingMCP(companyName);
            
            if (exists) {
                console.log(`✅ Found existing MCP for ${companyName}!`);
                console.log(`🌐 Access: https://mcp.${companyName.toLowerCase().replace(/\s+/g, '')}.2100.cool`);
                await this.addSapphireToExistingMCP(companyName, userEmail);
            } else {
                console.log(`🆕 Creating new MCP for ${companyName}...`);
                await this.deployNewMCP(companyName, userEmail, {});
            }

        } catch (error) {
            console.error('💥 Setup failed:', error.message);
            process.exit(1);
        }
    }

    /**
     * Deploy new MCP server
     */
    async deployNewMCP(companyName, userEmail, userInfo) {
        console.log('\n🚀 Initiating rapid MCP deployment...');
        console.log('⚡ This will take a few minutes - please wait...\n');

        try {
            const result = await this.provisioner.provisionCompanyMCP(companyName, userEmail, userInfo);

            console.log('\n🎉 SUCCESS! Your company\'s MCP is ready!');
            console.log('═══════════════════════════════════════════════');
            console.log(`🌐 MCP Portal: https://${result.mcpDomain}`);
            console.log(`👑 Your Status: First Sapphire SAO (Pioneer)`);
            console.log(`📚 Educational Program: ${result.educationalProgram}`);
            console.log(`🎁 Incentive Program: Active`);
            console.log('═══════════════════════════════════════════════');
            
            console.log('\n📋 Your Next Steps:');
            console.log('1. 🌐 Visit your MCP portal and complete orientation');
            console.log('2. 📚 Begin Educational Seedling Program (Phase 1)');
            console.log('3. 👥 Start spreading awareness in your organization');
            console.log('4. 🏢 Introduce ASOOS to your leadership team');
            console.log('5. 💰 Earn rewards through referral program');
            
            console.log('\n🌱 Educational Seedling Program Started:');
            console.log('   Phase 1: Discovery & Orientation (ACTIVE)');
            console.log('   - AI Readiness Assessment');
            console.log('   - Sector-Specific Learning');
            console.log('   - Functional Role Mapping');

            console.log('\n🎯 Referral Opportunities:');
            console.log('   - CEO Introduction: Premium rewards');
            console.log('   - Executive team referrals: Progressive benefits');
            console.log('   - Department head network: Scaling rewards');

        } catch (error) {
            console.error('\n❌ Deployment failed:', error.message);
            console.log('\n🛠️ Troubleshooting steps:');
            console.log('1. Check your Google Cloud credentials');
            console.log('2. Verify network connectivity');
            console.log('3. Contact Diamond SAO Command Center for assistance');
            throw error;
        }
    }

    /**
     * Add user to existing MCP as Sapphire SAO
     */
    async addSapphireToExistingMCP(companyName, userEmail) {
        console.log('\n👑 Adding you as Sapphire SAO to existing MCP...');

        // In production, this would call the existing MCP API
        const sapphireProfile = await this.provisioner.createFirstSapphireSAO(companyName, userEmail, {});
        
        console.log('\n✅ Successfully added as Sapphire SAO!');
        console.log('═══════════════════════════════════════════════');
        console.log(`🌐 MCP Portal: https://mcp.${companyName.toLowerCase().replace(/\s+/g, '')}.2100.cool`);
        console.log(`👑 Your Status: Sapphire SAO`);
        console.log(`📚 Educational Access: Complete`);
        console.log(`🎁 Incentive Program: Active`);
        console.log('═══════════════════════════════════════════════');

        console.log('\n📋 Your Access Includes:');
        console.log('✅ Full company MCP management');
        console.log('✅ Educational program participation');
        console.log('✅ Referral program benefits');
        console.log('✅ Executive introduction support');
        console.log('✅ Team expansion capabilities');
    }

    /**
     * Helper to ask questions interactively
     */
    askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer.trim());
            });
        });
    }

    /**
     * Display usage information
     */
    showUsage() {
        console.log('MCP Quick Setup - "IF NO MCP HURRY MAKE ONE QUICK! :)"');
        console.log('');
        console.log('Usage:');
        console.log('  mcp-quick-setup                           # Interactive mode');
        console.log('  mcp-quick-setup <company> <email>         # Command line mode');
        console.log('');
        console.log('Examples:');
        console.log('  mcp-quick-setup');
        console.log('  mcp-quick-setup "Acme Corp" john@acme.com');
        console.log('  mcp-quick-setup Microsoft sarah@microsoft.com');
        console.log('');
        console.log('What happens:');
        console.log('  🔍 Checks if company MCP already exists');
        console.log('  🆕 Creates new MCP server if needed (5-10 minutes)');
        console.log('  👑 Sets you as first Sapphire SAO');
        console.log('  📚 Activates Educational Seedling program');
        console.log('  🎁 Enables referral and incentive programs');
        console.log('  🌐 Provides instant access to your company portal');
        console.log('');
        console.log('Support: Diamond SAO Command Center');
    }
}

/**
 * Main execution
 */
async function main() {
    const quickSetup = new MCPQuickSetup();
    
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        // Interactive mode
        await quickSetup.interactiveSetup();
    } else if (args.length === 2) {
        // Command line mode
        const [companyName, userEmail] = args;
        await quickSetup.commandLineSetup(companyName, userEmail);
    } else if (args[0] === '--help' || args[0] === '-h') {
        // Show usage
        quickSetup.showUsage();
    } else {
        // Invalid usage
        console.log('❌ Invalid arguments');
        quickSetup.showUsage();
        process.exit(1);
    }
}

// Run if called directly
if (require.main === module) {
    main().catch((error) => {
        console.error('💥 Fatal error:', error.message);
        process.exit(1);
    });
}