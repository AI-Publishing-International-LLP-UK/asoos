// WFA-GENERATED: MongoDB Schema for ASOOS Flyer ML System
// Auto-generated by Workforce Automation Swarm in 0.3 seconds

const mongoose = require('mongoose');

// Dr. Lucy ML Processing Schema
const MLProcessingSchema = new mongoose.Schema({
  requestId: { type: String, required: true, unique: true },
  organizationData: [{
    name: String,
    domain: String,
    industry: String,
    metadata: mongoose.Schema.Types.Mixed
  }],
  mlResults: {
    confidence: { type: Number, min: 0, max: 1 },
    predictions: [mongoose.Schema.Types.Mixed],
    processingTime: Number,
    algorithm: String
  },
  connectorResults: [{
    connectorType: { type: String, enum: ['dr-lucy', 'dr-memoria', 'dr-match', 'web-crawler'] },
    status: String,
    data: mongoose.Schema.Types.Mixed,
    timestamp: Date
  }],
  status: { type: String, enum: ['pending', 'processing', 'completed', 'failed'] },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

// Professor Lee Curation Schema
const CurationSchema = new mongoose.Schema({
  requestId: { type: String, required: true, unique: true },
  organizationId: String,
  humanReview: {
    reviewer: String,
    decision: { type: String, enum: ['approved', 'rejected', 'needs_revision'] },
    confidence: Number,
    notes: String,
    timestamp: Date
  },
  aiAssistance: {
    suggestions: [String],
    confidence: Number,
    reasoning: String
  },
  feedbackLoop: {
    mlLearning: Boolean,
    improvementData: mongoose.Schema.Types.Mixed
  },
  createdAt: { type: Date, default: Date.now }
});

// Connector Performance Schema
const ConnectorMetricsSchema = new mongoose.Schema({
  connectorType: String,
  timestamp: { type: Date, default: Date.now },
  performance: {
    responseTime: Number,
    successRate: Number,
    errorRate: Number,
    throughput: Number
  },
  health: {
    status: String,
    lastHealthCheck: Date,
    uptime: Number
  },
  usage: {
    requestCount: Number,
    dataProcessed: Number,
    costMetrics: mongoose.Schema.Types.Mixed
  }
});

// ML Feedback Schema
const FeedbackSchema = new mongoose.Schema({
  organizationId: String,
  feedbackType: { type: String, enum: ['accuracy', 'relevance', 'quality', 'performance'] },
  rating: { type: Number, min: 1, max: 5 },
  comments: String,
  mlImpact: {
    beforeScore: Number,
    afterScore: Number,
    improvement: Number
  },
  submittedBy: String,
  timestamp: { type: Date, default: Date.now }
});

// Export models
module.exports = {
  MLProcessing: mongoose.model('MLProcessing', MLProcessingSchema),
  Curation: mongoose.model('Curation', CurationSchema),
  ConnectorMetrics: mongoose.model('ConnectorMetrics', ConnectorMetricsSchema),
  Feedback: mongoose.model('Feedback', FeedbackSchema)
};

// WFA-GENERATED: Database Connection Manager
class DatabaseManager {
  constructor() {
    this.connected = false;
    this.retryCount = 0;
    this.maxRetries = 5;
  }

  async connect() {
    try {
      const mongoUri = process.env.MONGODB_ATLAS_URI || 'mongodb://localhost:27017/asoos-flyer-ml';
      await mongoose.connect(mongoUri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
      });
      this.connected = true;
      console.log('üóÑÔ∏è WFA: Database connected successfully');
      return true;
    } catch (error) {
      console.error('‚ùå WFA: Database connection failed:', error.message);
      if (this.retryCount < this.maxRetries) {
        this.retryCount++;
        await new Promise(resolve => setTimeout(resolve, 2000));
        return this.connect();
      }
      return false;
    }
  }

  async disconnect() {
    if (this.connected) {
      await mongoose.disconnect();
      this.connected = false;
      console.log('üóÑÔ∏è WFA: Database disconnected');
    }
  }

  isConnected() {
    return this.connected && mongoose.connection.readyState === 1;
  }
}

// WFA-GENERATED: Auto-export
module.exports.DatabaseManager = DatabaseManager;
