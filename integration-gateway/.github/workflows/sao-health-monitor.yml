name: Super Admin Owner Health Monitor

on:
  workflow_dispatch:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write
  actions: write
  administration: write

jobs:
  monitor-sao-health:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Check Repository Permissions
        run: |
          echo "Checking SAO permissions..."
          gh api repos/${{ github.repository }} --jq '.permissions' > permissions.json
          
          # Verify admin access
          if ! jq -e '.admin == true' permissions.json > /dev/null; then
            echo "::error::SAO does not have admin permissions!"
            gh issue create \
              --title "🚨 SAO Permission Alert" \
              --body "SAO permissions are not properly configured" \
              --label "security,high-priority"
          fi

      - name: Monitor Organization Health
        run: |
          echo "### Organization Health Check" > health_report.md
          echo "" >> health_report.md
          
          # Check organization settings
          gh api orgs/${{ github.repository_owner }} > org_info.json
          
          # Required security settings
          jq -r '.two_factor_requirement_enabled' org_info.json | \
          if [ "$(cat)" != "true" ]; then
            echo "⚠️ Two-factor authentication is not required" >> health_report.md
          fi

      - name: Repository Metrics
        run: |
          echo "### Repository Metrics" >> health_report.md
          echo "" >> health_report.md
          
          # Get repository metrics
          gh api repos/${{ github.repository }} > repo_metrics.json
          
          # Format metrics
          echo "- Open Issues: $(jq '.open_issues_count' repo_metrics.json)" >> health_report.md
          echo "- Watchers: $(jq '.subscribers_count' repo_metrics.json)" >> health_report.md
          echo "- Last Push: $(jq -r '.pushed_at' repo_metrics.json)" >> health_report.md

      - name: Check Branch Protections
        run: |
          echo "### Branch Protection Status" >> health_report.md
          echo "" >> health_report.md
          
          # Check protection rules
          gh api repos/${{ github.repository }}/branches/production/protection > protection.json
          
          # Verify required checks
          jq -r '.required_status_checks.contexts[]' protection.json > required_checks.txt || echo "No required checks configured"
          
          # Report status
          echo "Required Checks:" >> health_report.md
          cat required_checks.txt | while read check; do
            echo "- $check" >> health_report.md
          done

      - name: Monitor Action Permissions
        run: |
          echo "### Action Permissions" >> health_report.md
          echo "" >> health_report.md
          
          # Check workflow permissions
          gh api repos/${{ github.repository }}/actions/permissions > action_perms.json
          
          # Report permissions
          echo "- Workflow Permissions: $(jq -r '.enabled' action_perms.json)" >> health_report.md

      - name: Check Access Patterns
        run: |
          echo "### Access Patterns" >> health_report.md
          echo "" >> health_report.md
          
          # Get traffic stats
          gh api repos/${{ github.repository }}/traffic/views > traffic.json
          gh api repos/${{ github.repository }}/traffic/clones >> traffic.json
          
          # Report patterns
          echo "Recent Traffic:" >> health_report.md
          jq -r '.count' traffic.json | awk '{sum += $1} END {print "Total Views: " sum}' >> health_report.md

      - name: Audit Recent Changes
        run: |
          echo "### Recent Changes Audit" >> health_report.md
          echo "" >> health_report.md
          
          # Get recent commits
          git log --since="24 hours ago" --pretty=format:"%h - %s" > recent_commits.txt
          
          echo "Last 24 Hours Commits:" >> health_report.md
          cat recent_commits.txt >> health_report.md

      - name: Check Deployment Status
        run: |
          echo "### Deployment Status" >> health_report.md
          echo "" >> health_report.md
          
          # Check deployments
          gh api repos/${{ github.repository }}/deployments > deployments.json
          
          # Report status
          echo "Recent Deployments:" >> health_report.md
          jq -r '.[] | "- " + .environment + ": " + .state' deployments.json >> health_report.md

      - name: Generate SAO Dashboard
        run: |
          echo "# SAO Health Dashboard 💎" > dashboard.md
          echo "Generated at $(date -u)" >> dashboard.md
          echo "" >> dashboard.md
          
          # Combine all reports
          cat health_report.md >> dashboard.md
          
          # Create or update dashboard issue
          if gh issue list --label "sao-dashboard" --json number | jq -e '.[0]' > /dev/null; then
            issue_number=$(gh issue list --label "sao-dashboard" --json number | jq -r '.[0].number')
            gh issue edit $issue_number --body-file dashboard.md
          else
            gh issue create \
              --title "💎 SAO Health Dashboard" \
              --body-file dashboard.md \
              --label "sao-dashboard"
          fi

      - name: Alert on Critical Issues
        if: failure()
        run: |
          gh issue create \
            --title "🚨 SAO Health Check Failed" \
            --body "Critical issues detected in SAO health monitoring. Please review the dashboard." \
            --label "critical,sao-alert"

      - name: Update Status
        run: |
          echo "### SAO Health Monitor Summary 💎" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat dashboard.md >> $GITHUB_STEP_SUMMARY

