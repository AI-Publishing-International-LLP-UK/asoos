{
  "info": {
    "name": "ASOOS Mobile Workers API Tests",
    "description": "Comprehensive API tests for Android and iOS Cloudflare Workers with Dream Commander integration",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "android_base_url",
      "value": "https://mobile-android.asoos.2100.cool",
      "type": "string"
    },
    {
      "key": "ios_base_url",
      "value": "https://mobile-ios.asoos.2100.cool",
      "type": "string"
    },
    {
      "key": "app_version",
      "value": "2.0.0",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Android Worker Tests",
      "item": [
        {
          "name": "Android Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Android worker responds', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "// Test security headers",
                  "pm.test('Security headers present', function () {",
                  "    pm.expect(pm.response.headers.get('X-Wing-Assignment')).to.exist;",
                  "    pm.expect(pm.response.headers.get('X-Victory36-Protected')).to.exist;",
                  "});",
                  "",
                  "// Test CORS headers",
                  "pm.test('CORS headers configured', function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Methods')).to.exist;",
                  "});",
                  "",
                  "// If authentication required, verify message",
                  "if (pm.response.code === 401 || pm.response.code === 403) {",
                  "    pm.test('Authentication message present', function () {",
                  "        const responseText = pm.response.text();",
                  "        pm.expect(responseText).to.include('authenticate');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform",
                "value": "android",
                "type": "text"
              },
              {
                "key": "X-App-Version",
                "value": "{{app_version}}",
                "type": "text"
              },
              {
                "key": "User-Agent",
                "value": "ASOOS-Android-App/{{app_version}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{android_base_url}}/health",
              "host": ["{{android_base_url}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Android Config Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Android config endpoint responds', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "pm.test('Wing assignment header correct for Android', function () {",
                  "    const wingHeader = pm.response.headers.get('X-Wing-Assignment');",
                  "    if (wingHeader) {",
                  "        pm.expect(wingHeader).to.equal('RIX-2');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform",
                "value": "android",
                "type": "text"
              },
              {
                "key": "X-Dream-Commander",
                "value": "enabled",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{android_base_url}}/config",
              "host": ["{{android_base_url}}"],
              "path": ["config"]
            }
          }
        },
        {
          "name": "Android Dream Commander API",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dream Commander API responds', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "pm.test('Victory36 protection active', function () {",
                  "    const victory36Header = pm.response.headers.get('X-Victory36-Protected');",
                  "    if (victory36Header) {",
                  "        pm.expect(victory36Header).to.equal('true');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Victory36",
                "value": "enabled",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{android_base_url}}/dream-commander",
              "host": ["{{android_base_url}}"],
              "path": ["dream-commander"]
            }
          }
        },
        {
          "name": "Android OPTIONS Preflight",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OPTIONS request successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test('CORS preflight headers present', function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Methods')).to.exist;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Headers')).to.exist;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Max-Age')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "https://asoos.2100.cool",
                "type": "text"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{android_base_url}}/health",
              "host": ["{{android_base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "iOS Worker Tests",
      "item": [
        {
          "name": "iOS Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('iOS worker responds', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "pm.test('Wing assignment header correct for iOS', function () {",
                  "    const wingHeader = pm.response.headers.get('X-Wing-Assignment');",
                  "    if (wingHeader) {",
                  "        pm.expect(wingHeader).to.equal('RIX-1');",
                  "    }",
                  "});",
                  "",
                  "pm.test('iOS security headers present', function () {",
                  "    pm.expect(pm.response.headers.get('X-Victory36-Protected')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform",
                "value": "ios",
                "type": "text"
              },
              {
                "key": "X-App-Version",
                "value": "{{app_version}}",
                "type": "text"
              },
              {
                "key": "User-Agent",
                "value": "ASOOS-iOS-App/{{app_version}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{ios_base_url}}/health",
              "host": ["{{ios_base_url}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "iOS Config Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('iOS config endpoint responds', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "pm.test('Platform differentiation working', function () {",
                  "    // iOS should have RIX-1, Android should have RIX-2",
                  "    const wingHeader = pm.response.headers.get('X-Wing-Assignment');",
                  "    if (wingHeader) {",
                  "        pm.expect(wingHeader).to.equal('RIX-1');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform",
                "value": "ios",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{ios_base_url}}/config",
              "host": ["{{ios_base_url}}"],
              "path": ["config"]
            }
          }
        },
        {
          "name": "iOS Victory36 API",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Victory36 API responds', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "pm.test('Victory36 protection verified', function () {",
                  "    const victory36Header = pm.response.headers.get('X-Victory36-Protected');",
                  "    if (victory36Header) {",
                  "        pm.expect(victory36Header).to.equal('true');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{ios_base_url}}/victory36",
              "host": ["{{ios_base_url}}"],
              "path": ["victory36"]
            }
          }
        },
        {
          "name": "iOS Voice Commands API",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Voice commands API accessible', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "pm.test('Proper CORS for voice features', function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform",
                "value": "ios",
                "type": "text"
              },
              {
                "key": "X-Dream-Commander",
                "value": "enabled",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{ios_base_url}}/voice-commands",
              "host": ["{{ios_base_url}}"],
              "path": ["voice-commands"]
            }
          }
        }
      ]
    },
    {
      "name": "Cross-Platform Validation",
      "item": [
        {
          "name": "Platform Differentiation Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test validates that both platforms are working",
                  "// and have different wing assignments",
                  "pm.test('Cross-platform validation setup', function () {",
                  "    pm.expect(pm.environment.get('android_base_url')).to.exist;",
                  "    pm.expect(pm.environment.get('ios_base_url')).to.exist;",
                  "});",
                  "",
                  "pm.test('Authentication layer active on both platforms', function () {",
                  "    // This test assumes both workers are behind auth",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Platform",
                "value": "test",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{android_base_url}}/health",
              "host": ["{{android_base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ]
}
