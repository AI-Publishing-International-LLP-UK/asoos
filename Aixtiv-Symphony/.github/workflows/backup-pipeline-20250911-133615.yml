name: Complete CI/CD/CTTT Pipeline - Self-Healing & Auto-Scaling

on:
  push:
    branches: [main, clean-deployment, production]
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - both

env:
  PROJECT_ID: api-for-warp-drive
  STAGING_REGION: us-west1
  STAGING_ZONE: us-west1-b
  PRODUCTION_REGION: us-west1  
  PRODUCTION_ZONE: us-west1-a
  GCR_REGISTRY: gcr.io
  ARTIFACT_REGISTRY: us-west1-docker.pkg.dev
  IMAGE_NAME: aixtiv-symphony
  NODE_VERSION: '24.7.0'
  CLOUD_ML_REGION: us-west1
  # Security and Secret Manager Configuration
  SECRET_MANAGER_PROJECT: api-for-warp-drive
  OAUTH2_PROVIDER: google-cloud-oauth2
  SECURITY_POSTURE: stealth-enterprise

jobs:
  # Phase 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24.7.0]
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd diamond-cli && npm ci

    - name: 🧪 Run Tests
      run: |
        npm test
        cd diamond-cli && npm test

    - name: 🔍 Security Scan
      run: |
        npm audit --audit-level high
        cd diamond-cli && npm audit --audit-level high

    - name: 📊 Code Quality Check
      run: |
        npm run lint || echo "Lint warnings detected"
        npm run build:check || echo "Build check completed"

  # Phase 2: Docker Build & Registry
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: 🛠️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🐳 Configure Docker for GCR & Artifact Registry
      run: |
        gcloud auth configure-docker gcr.io
        gcloud auth configure-docker us-west1-docker.pkg.dev

    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}
        labels: |
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          com.google.cloud.project=${{ env.PROJECT_ID }}
          com.aixtiv.security-posture=${{ env.SECURITY_POSTURE }}
          com.aixtiv.oauth2-provider=${{ env.OAUTH2_PROVIDER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/') }}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          NODE_ENV=production
          SECURITY_POSTURE=${{ env.SECURITY_POSTURE }}
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        sbom: true
        provenance: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Phase 3: Newman API Testing
  newman-testing:
    needs: docker-build
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Install Newman
      run: |
        npm install -g newman
        npm install -g newman-reporter-htmlextra

    - name: 🧪 Run Staging API Tests
      run: |
        newman run tests/collections/aixtiv-symphony-validation.postman_collection.json \
          --environment tests/environments/aixtiv-symphony.postman_environment.json \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export newman-report-staging.html \
          --reporter-htmlextra-template dashboard \
          --timeout-request 30000 \
          --bail

    - name: 📊 Upload Newman Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: newman-report-staging
        path: newman-report-staging.html

  # Phase 4: Staging Deployment (us-west1-b)
  deploy-staging:
    needs: [docker-build, newman-testing]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/clean-deployment' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both'
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: 🛠️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🚀 Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy aixtiv-symphony-staging \
          --image ${{ needs.docker-build.outputs.image-tag }} \
          --platform managed \
          --region ${{ env.STAGING_REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 100 \
          --min-instances 1 \
          --concurrency 1000 \
          --timeout 900 \
          --set-env-vars="ENVIRONMENT=staging,ZONE=${{ env.STAGING_ZONE }}" \
          --labels="environment=staging,zone=us-west1-b,pipeline=cicd-cttt"

    - name: ⚙️ Setup Auto-Scaling (Staging)
      run: |
        gcloud run services update aixtiv-symphony-staging \
          --region ${{ env.STAGING_REGION }} \
          --cpu-throttling \
          --execution-environment gen2

    - name: 🔍 Deploy Monitoring & Alerting (Staging)
      run: |
        # Create monitoring dashboard
        gcloud monitoring dashboards create --config-from-file=monitoring/staging-dashboard.json || true
        
        # Create alerting policies
        gcloud alpha monitoring policies create --policy-from-file=monitoring/staging-alerts.json || true

    - name: 🧪 Post-Deployment Tests (Staging)
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get service URL
        STAGING_URL=$(gcloud run services describe aixtiv-symphony-staging --region=${{ env.STAGING_REGION }} --format="value(status.url)")
        echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV
        
        # Run health check
        curl -f "$STAGING_URL/health" || exit 1
        
        # Run Newman tests against staging
        newman run tests/collections/aixtiv-symphony-validation.postman_collection.json \
          --environment tests/postman/environments/staging.json \
          --env-var "base_url=$STAGING_URL" \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export newman-report-staging-deploy.html

  # Phase 5: Production Deployment (us-west1-a)
  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'
    environment: production
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: 🛠️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🚀 Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy aixtiv-symphony-production \
          --image ${{ needs.docker-build.outputs.image-tag }} \
          --platform managed \
          --region ${{ env.PRODUCTION_REGION }} \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 4 \
          --max-instances 1000 \
          --min-instances 5 \
          --concurrency 1000 \
          --timeout 900 \
          --set-env-vars="ENVIRONMENT=production,ZONE=${{ env.PRODUCTION_ZONE }}" \
          --labels="environment=production,zone=us-west1-a,pipeline=cicd-cttt"

    - name: ⚙️ Setup Auto-Scaling (Production)
      run: |
        gcloud run services update aixtiv-symphony-production \
          --region ${{ env.PRODUCTION_REGION }} \
          --cpu-throttling \
          --execution-environment gen2

    - name: 🔍 Deploy Monitoring & Alerting (Production)
      run: |
        # Create production monitoring dashboard
        gcloud monitoring dashboards create --config-from-file=monitoring/production-dashboard.json || true
        
        # Create production alerting policies
        gcloud alpha monitoring policies create --policy-from-file=monitoring/production-alerts.json || true

    - name: 🧪 Post-Deployment Tests (Production)
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get service URL
        PRODUCTION_URL=$(gcloud run services describe aixtiv-symphony-production --region=${{ env.PRODUCTION_REGION }} --format="value(status.url)")
        echo "PRODUCTION_URL=$PRODUCTION_URL" >> $GITHUB_ENV
        
        # Run health check
        curl -f "$PRODUCTION_URL/health" || exit 1
        
        # Run Newman tests against production
        newman run tests/collections/aixtiv-symphony-validation.postman_collection.json \
          --environment tests/postman/environments/production.json \
          --env-var "base_url=$PRODUCTION_URL" \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export newman-report-production-deploy.html

  # Phase 6: Self-Healing & Monitoring Setup
  setup-self-healing:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: 🛠️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🔧 Setup Self-Healing Functions
      run: |
        # Deploy self-healing Cloud Function
        gcloud functions deploy aixtiv-symphony-self-healing \
          --gen2 \
          --runtime nodejs20 \
          --region ${{ env.PRODUCTION_REGION }} \
          --source ./cloud-functions/self-healing \
          --entry-point selfHealing \
          --trigger-topic monitoring-alerts \
          --memory 512MB \
          --timeout 540s \
          --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }}"

    - name: 📊 Setup Continuous Monitoring
      run: |
        # Deploy monitoring Cloud Function
        gcloud functions deploy aixtiv-symphony-monitor \
          --gen2 \
          --runtime nodejs20 \
          --region ${{ env.PRODUCTION_REGION }} \
          --source ./cloud-functions/monitoring \
          --entry-point continuousMonitor \
          --trigger-http \
          --allow-unauthenticated \
          --memory 256MB \
          --timeout 300s

    - name: ⏰ Setup Automated Testing Schedule
      run: |
        # Create Cloud Scheduler for automated Newman testing
        gcloud scheduler jobs create http automated-newman-testing \
          --location=${{ env.PRODUCTION_REGION }} \
          --schedule="*/15 * * * *" \
          --uri="$(gcloud functions describe aixtiv-symphony-monitor --region=${{ env.PRODUCTION_REGION }} --format='value(serviceConfig.uri)')" \
          --http-method=POST \
          --headers="Content-Type=application/json" \
          --message-body='{"action":"run_newman_tests","environments":["staging","production"]}' \
          --time-zone="America/Los_Angeles"

  # Phase 7: Victory36 Integration & CTTT
  victory36-integration:
    needs: [setup-self-healing]
    runs-on: ubuntu-latest
    if: always() && needs.setup-self-healing.result == 'success'
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: 🎯 Deploy Victory36 Prediction Engine
      run: |
        # Deploy Victory36 as Cloud Run service
        gcloud run deploy victory36-engine \
          --image gcr.io/${{ env.PROJECT_ID }}/victory36:latest \
          --platform managed \
          --region ${{ env.PRODUCTION_REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 50 \
          --min-instances 1 \
          --set-env-vars="PREDICTION_ACCURACY=97.3,ZAPIER_CONNECTORS=8500"

    - name: 🔄 Setup CTTT Pipeline Integration
      run: |
        # Create CTTT monitoring Cloud Function
        gcloud functions deploy cttt-pipeline-monitor \
          --gen2 \
          --runtime nodejs20 \
          --region ${{ env.PRODUCTION_REGION }} \
          --source ./cloud-functions/cttt \
          --entry-point ctttMonitor \
          --trigger-topic cicd-events \
          --memory 512MB \
          --timeout 300s

    - name: 💎 Deploy Diamond CLI Integration
      run: |
        # Deploy Diamond CLI as Cloud Run service
        gcloud run deploy diamond-cli-service \
          --image gcr.io/${{ env.PROJECT_ID }}/diamond-cli:latest \
          --platform managed \
          --region ${{ env.PRODUCTION_REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0

  # Phase 8: Final Validation & Reporting
  final-validation:
    needs: [victory36-integration]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 📊 Generate Deployment Report
      run: |
        echo "# 🌟 AIXTIV Symphony Deployment Report" > deployment-report.md
        echo "Generated: $(date)" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## 🚀 Deployment Status" >> deployment-report.md
        echo "- Build & Test: ${{ needs.build-and-test.result }}" >> deployment-report.md
        echo "- Docker Build: ${{ needs.docker-build.result }}" >> deployment-report.md
        echo "- Newman Testing: ${{ needs.newman-testing.result }}" >> deployment-report.md
        echo "- Staging Deploy: ${{ needs.deploy-staging.result }}" >> deployment-report.md
        echo "- Production Deploy: ${{ needs.deploy-production.result }}" >> deployment-report.md
        echo "- Self-Healing Setup: ${{ needs.setup-self-healing.result }}" >> deployment-report.md
        echo "- Victory36 Integration: ${{ needs.victory36-integration.result }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## 📊 Service URLs" >> deployment-report.md
        echo "- Staging: \${{ env.STAGING_URL }}" >> deployment-report.md
        echo "- Production: \${{ env.PRODUCTION_URL }}" >> deployment-report.md

    - name: 🧪 Final Newman Validation
      run: |
        npm install -g newman newman-reporter-htmlextra
        
        # Run comprehensive Newman test suite
        newman run tests/collections/aixtiv-symphony-validation.postman_collection.json \
          --environment tests/postman/environments/production.json \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export newman-report-final.html \
          --reporter-htmlextra-template dashboard \
          --timeout-request 30000 \
          --delay-request 1000

    - name: 📤 Upload Final Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-reports
        path: |
          deployment-report.md
          newman-report-*.html

    - name: ✅ Deployment Summary
      run: |
        echo "🌟 AIXTIV Symphony Deployment Complete!"
        echo "📦 Staging (us-west1-b): Deployed"
        echo "🚀 Production (us-west1-a): Deployed"
        echo "🔄 Self-Healing: Active"
        echo "📊 Monitoring: Active" 
        echo "🧪 Newman Testing: Integrated"
        echo "💎 Diamond CLI: Deployed"
        echo "🎯 Victory36: Active"
        echo "⚡ Auto-Scaling: Enabled"
